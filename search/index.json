[{"content":"上一篇聊到了 TCP/UDP, 和非對稱加密/對稱加密的基本觀念, 再來繼續聊建立建立通訊之後之後的事!! 這也是我在準備AWS Cloud Support Engineer面試題, 重新整理思路釐清整體概念的, 我們先從網路層面說起\n輸入網址之後發生的事 有沒有想過, 在使用Browser輸入google.com按下 Enter, 之後發生了什麼事? 瀏覽器是怎麼將網頁顯示在你的螢幕上的!\n按下Enter之後, 首先會先去DNS server(一般是UDP 53port, 但會先查看本機的cache) 查詢到google.com 的IP是多少.\n這裡我們使用dig指令 來查看DNS server 的資訊(另外也可以使用nslookup來查詢, 但是現在新的工具建議使用dig比較清楚)\nstatus: NOERROR 代表沒有錯誤 QUESTION SECTION 我們查詢的是google的A記錄 Google.com 對應的 IP是 142.250.196.206 HTTPS 與 TLS 當瀏覽器拿到 IP 後, 這時候看到網址是「https://」開頭就其實背後就是使用SSL/TLS加密,會觸發 TLS Handshake, 這時候SSL/TLS做了2件事,\n使用加密可以確保傳輸的內容不會被竊聽 驗證伺服器身分（確認你連的是真的 Google，而不是假網站） TLS Handshake的流程 當連到 https:// 開頭的網站時，背後其實跑的流程：\nClient 發送 Hello 告訴Server 我支援哪些加密演算法, TLS 版本? Server 回傳 Hello 跟Certificate（網站名稱, 憑證, 公鑰） 瀏覽器會檢查憑證是否有效 (有沒有過期, 是不是有效的CA發的, 主機名) 如果沒問題, 瀏覽器用公鑰加密Session Key送給 Server Server 用私鑰解開 Session Key，之後用這把金鑰雙方加密傳輸 為什麼安全呢?\n公鑰加密是「一把鎖 → 人人可鎖，只能你自己能解」的概念 就算中間有人攔截，也無法解出 Session Key 這也是上一篇說到的 混合加密（RSA + AES）。\n非對稱加密建立信任 + 對稱加密負責傳輸 因為對稱加密速度快，適合長時間大量傳輸，而非對稱加密雖安全但運算慢，適合只用在「傳送 session key」。\n這裡使用openssl來查看 TLS 連線過程： openssl s_client -connect google.com:443 -servername google.com -msg Client Hello → 支援哪些加密演算法、TLS 版本 Server Hello → 協議、Cipher、憑證內容 這裡有一個重點是怎麼確定你連到的真的Google呢?怎麼去驗證呢?\nCertificate的運作 Certificate用來當作網頁的身份證, 上面寫了\n網站名稱(google.com) 和上一篇說到的公鑰（用來給瀏覽器加密 Session Key, 單向的加密) 以及是誰背書的簽發者, (CA, Certificate Authority)? 這個清單上存在我們的瀏覽器中! 有效期限 簽章 CA 使用自己的key來加簽, 確定憑證沒有被篡改 有點像要進去公司大樓, 我拿員工證(Certificate)給管理員(Browser)看, 看到誰google發給我的員工證,這樣我就可以進去了（建立 HTTPS連線）.\n瀏覽器內建會信任這些 CA 發的憑證, 所以我們的系統跟瀏覽器喔都有預設信任的CA清單, 都預設在系統當中了, 這幾個CA裡面的清單會自動更新來收錄新網站\n所以瀏覽器信 CA → 信這張憑證 → 信這個網站。 只要是可信 CA 簽出來的憑證，瀏覽器就會信任 CA 是憑證頒發單位 可以在瀏覽器中查看 Google 的憑證內容, 有效期限, 還有公鑰 這裡我來說一下憑證的簽發流程(self Signed常常會使用到, 以後在出一篇詳細說明)\n一般的流程是這樣, 在server端 → 建立 CSR（憑證簽發請求） → 傳送給 CA → CA 用私鑰簽名 → 回傳憑證\n用我最近找工作來舉例的話就是:我在104寫履歷（CSR），給我的推薦人（CA），幫我背書（簽名）說「Jason沒問題!」，我就可以拿著這張履歷（憑證）找工作（給瀏覽器驗證）。\n總結 寫著寫著發現有太多要延伸出去的, 不知不覺寫了很多, 原本想要講 JWT 和自簽憑證，但還沒來得及, 下篇再繼續分享！\n","date":"2025-04-03T12:13:00+08:00","image":"https://jasontsaicc.github.io/Jason-ops-notes/p/%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80%E4%B9%8B%E5%BE%8C%E7%99%BC%E7%94%9F%E7%9A%84%E4%BA%8B-dns-tls-%E4%BB%A5%E5%8F%8Acertificate/blog_cover_03_hu_7f15d9c8fa47d8de.jpeg","permalink":"https://jasontsaicc.github.io/Jason-ops-notes/p/%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80%E4%B9%8B%E5%BE%8C%E7%99%BC%E7%94%9F%E7%9A%84%E4%BA%8B-dns-tls-%E4%BB%A5%E5%8F%8Acertificate/","title":"輸入網址之後發生的事?, DNS, TLS, 以及Certificate"},{"content":"第二篇文章獻給 Andrew 和球魚啦! 工程師的聚會除了在罵 DGR、佛地魔之外，這次竟然從吃烤鴨聊到 x86、Apple II、DOS、macOS、iOS 的歷史，一路延伸到網景、Sun Microsystems。\n然後被 Andrew 一個靈魂拷問直接問到：\nOSI 架構是什麼？TCP/IP 怎麼運作？什麼是 3-way handshake、UDP、JWT？\n這些都是面試必考題，不過不理解整個演進脈絡，每次都會變成「一看就會、一被問就廢」。\n就從TCP開始吧!! 故事起點：兩台機器要怎麼溝通？ UDP：像寄明信片 （想像一下哈利波特收到霍格華茲入學通知書）\n完全沒有打招呼，資料就直接送出去，會導致：\n不保證送達、順序也可能亂掉 適合：直播、語音、遊戲（掉一封信沒差，反正大量資料一直傳） 優點：快、省資源\n缺點：不可靠，資料可能遺失\nTCP：像打電話 TCP 建立連線前會先「打招呼」 → 三次握手（3-way handshake）\nClient：嘿，我要跟你講話（SYN） Server：好啊，我準備好了（SYN+ACK） Client：那我開始說囉（ACK） 就像你打給朋友，對方說「喂」，你回「嗨」→ 連線才算建立。\n優點：可靠、有順序、會補資料\n缺點：多一步手續，速度比 UDP 慢\n用工具觀察握手流程 可以用 tcpdump 搭配 curl 觀察完整流程： Client → Server：SYN 從本機（port 50963）發出 SYN 封包 → Google 443 Server → Client：SYN-ACK Google 回一個 SYN + ACK，acknowledge 你的序號 Client → Server：ACK 回 ACK，握手完成，連線建立 封包標記簡單對照表 Flag 意思 [S] SYN：我要建立連線 [S.] SYN+ACK：我也 OK，且回你 [.] ACK：確認完成握手 [P.] Push：開始傳資料 [F.] FIN：我要斷線結束連線 資料會被偷怎麼辦？ 建立溝通管道後，下一步要擔心資料被竊聽，這時就需要 加密。\n就像電影裡的情報員，不能讓敵人偷聽到情報傳遞過程。\n加密的兩種方式 對稱式加密（Symmetric Encryption） 情報員出發前，雙方先交換鑰匙：\n情報員把資料放進保險箱，用鑰匙鎖起來送出 你收到後用一樣的鑰匙打開 優點：速度快，適合大量資料（影片、檔案）\n缺點：鑰匙交換很危險（傳輸過程被偷就破功）\n非對稱式加密（Asymmetric Encryption – 公鑰與私鑰） 這種方式更聰明：\n你有一把「鎖頭」🔓（公鑰）和一把「鑰匙」🔐（私鑰） 把鎖頭公開給情報員，情報員用它上鎖 → 資料安全寄回 只有你有的鑰匙能打開 → 不用交換私密資訊 優點：鑰匙不用傳，安全\n缺點：速度慢，不適合傳大量資料\nDevOps 世界中的加密應用 這兩種加密方式常搭配使用：\n用 非對稱加密（RSA） 傳送一組 session key 接著雙方用這組 session key 透過 對稱加密（AES） 傳輸大量資料 也就是做到：\n安全交換鑰匙（RSA） + 高速傳輸資料（AES）\n今天就先寫到這，下一篇再來聊聊 Certificate、SSL/TLS、JWT 的原理與應用。\n","date":"2025-03-30T00:00:00Z","image":"https://jasontsaicc.github.io/Jason-ops-notes/p/%E5%BE%9E%E5%90%83%E7%83%A4%E9%B4%A8%E8%81%8A%E5%88%B0-tcp%E9%87%8D%E6%96%B0%E5%9B%9E%E9%A1%A7%E7%B6%B2%E8%B7%AF%E9%80%9A%E8%A8%8A%E8%88%87%E5%8A%A0%E5%AF%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/cover2_hu_1b5eab2eb93a4d2d.jpg","permalink":"https://jasontsaicc.github.io/Jason-ops-notes/p/%E5%BE%9E%E5%90%83%E7%83%A4%E9%B4%A8%E8%81%8A%E5%88%B0-tcp%E9%87%8D%E6%96%B0%E5%9B%9E%E9%A1%A7%E7%B6%B2%E8%B7%AF%E9%80%9A%E8%A8%8A%E8%88%87%E5%8A%A0%E5%AF%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/","title":"從吃烤鴨聊到 TCP：重新回顧網路通訊與加密的基本原理"},{"content":"Why I Started This Blog 離開前一家公司後，經歷了一段不算順利的求職過程。 面試讓我意識到自己的不足，不只是技術層面，更多的是不知道該從哪裡開始學起。\n腦中總是有很多聲音——這裡不會、那裡也該補強，但又難以下手。\n直到我看到了 Dan Koe 的影片。他的觀點讓我有了新的想法：與其一直想，不如先做點什麼。\n那一刻，我決定開始寫作，當作一種自我對話，也是一種紀錄。\n記錄我在 DevOps 這條路上的學習歷程，包括技術筆記、解決問題的經驗，還有我對英文表達的練習。\n這個部落格，就是我行動的開始。\n我希望這個部落格可以幫我做到什麼？ 我想透過這個空間，把複雜的想法一一釐清，讓學習更有方向，也更有紀錄感。\n梳理學習方向，紀錄學習過程 練習用英文表達技術內容 回顧問題解法與學到的技巧 Final Thoughts This blog is a space where I can pause, reflect, and realign my thoughts. 為了讓自己在忙碌中，也能持續進步、慢慢前行。就從這裡開始。\n","date":"2025-03-30T15:17:00+08:00","image":"https://jasontsaicc.github.io/Jason-ops-notes/p/why-i-started-this-blog/cover_hu_e95a4276bf860a84.jpg","permalink":"https://jasontsaicc.github.io/Jason-ops-notes/p/why-i-started-this-blog/","title":"Why I Started This Blog"}]